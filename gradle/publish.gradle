// NOTE replace deficient built-in publishing plugin with nebula-publishing,
// which does a better job generating the POM and properly aggregates signature files for upload to Bintray
apply plugin: 'nebula-publishing'

def projectMeta = {
  url 'https://github.com/yuzutech/logstashj'
  inceptionYear '2016'
  licenses {
    license([:]) {
      name 'MIT'
      distribution 'repo'
    }
  }
  issueManagement {
    system 'github'
    url 'https://github.com/yuzutech/logstashj/issues'
  }
  scm {
    url 'https://github.com/yuzutech/logstashj'
  }
  developers {
    developer {
      id 'ggrossetie'
      name 'Guillaume Grossetie'
      email 'ggrossetie@yuzutech.fr'
      timezone '1'
      roles {
        role 'Project Lead'
      }
    }
  }
}

// FIXME we have to do afterEvaluate or the pom.xml changes don't take
afterEvaluate {
  publishing.publications.withType(MavenPublication) {
    // FIXME need to clear artifacts or else we get "multiple artifacts with the identical extension and classifier ('jar', 'null')" 
    // ...but perhaps we don't need this anyway
    //artifacts.clear()
    //from components.java

    // NOTE only build sources and javadoc jars when releasing
    if (project.statusIsRelease) {
      if (project.tasks.withType(Jar).findByName('sourcesJar')) {
        artifact sourcesJar
      }
      if (project.tasks.withType(Jar).findByName('javadocJar')) {
        artifact javadocJar
      }
    }

    pom.withXml {
      def rootNode = asNode()
      // NOTE Gradle sets the scope of all dependencies to runtime.
      //      jruby-core should be added with scope provided, but otherwise we're okay with runtime scopes.
      //def depsNode = rootNode.dependencies[0]
      //depsNode.dependency.each {
      //  if (it.scope.text() == 'runtime') {
      //    it.remove(it.scope)
      //  }
      //}
      rootNode.name[0].setValue(project.properName)
      // FIXME I'm slightly annoyed that the dependencies node comes before name and description
      rootNode.children().last() + projectMeta
    }
  }
}

// QUESTION should we move manifest creation to general Java plugin config?
jar {
  manifest {
    attributes \
      'Built-By': System.properties['user.name'],
      'Created-By': "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})".toString(),
      'Build-Date': buildDateOnly,
      'Implementation-Title': project.name,
      'Implementation-Version': project.version,
      'Implementation-Vendor': 'yuzutech.fr'
  }
}
